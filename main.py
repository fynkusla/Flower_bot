from telegram import (Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton)
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext)
from datetime import datetime, timedelta, time
import pytz
import sqlite3
import logging
import shutil
import os
from apscheduler.util import undefined

SAMARA_TIMEZONE = pytz.timezone('Europe/Samara')
ADMIN_PASSWORD = "1336"

# –í–∫–ª—é—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler –ê–Ω–∫–µ—Ç–∞
ASK_PHONE, MAIN_MENU, ADD_REASON, ADD_CUSTOM_REASON, ADD_DATE, ADD_WISHES, DELETE_RECORD, CONFIRM_ADD = range(8)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler –ó–∞–∫–∞–∑
PHONE, OCCASION, BUDGET, CUSTOM_BUDGET, DATE_SELECTION, CLIENT_REQUESTS, POSTCARD, POSTCARD_TEXT, DELIVERY, DELIVERY_ADDRESS, RECIPIENT, RECIPIENT_CONTACT, CONFIRMATION = range(
    13)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    [['–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π'], ['–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'], ['–ù–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'], ['–û –Ω–∞—Å']],
    one_time_keyboard=True)


def facts_to_str(user_data):
    facts = [f'{key}: {value}' for key, value in user_data.items() if key not in ['admin_access', 'selected_event']]
    return "\n".join(facts)


def create_database():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(''' 
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        phone_number TEXT
    )
    ''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–ø–∏—Å–µ–π
    cursor.execute(''' 
    CREATE TABLE IF NOT EXISTS records (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        reason TEXT,
        date TEXT,
        wishes TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        date TEXT,
        link TEXT
    )
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    cursor.execute("SELECT COUNT(*) FROM events")
    if cursor.fetchone()[0] == 0:
        events = [
            ("8 –º–∞—Ä—Ç–∞", "08.03", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–î–µ–Ω—å –º–∞—Ç–µ—Ä–∏", "24.11", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–î–µ–Ω—å —É—á–∏—Ç–µ–ª—è", "05.10", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "14.02", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–í—ã–ø—É—Å–∫–Ω—ã–µ", "28.06", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–ù–æ–≤—ã–π –≥–æ–¥", "31.12", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–î–µ–Ω—å —Å–µ–º—å–∏", "08.06", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–Ω–µ —É–∫–∞–∑–∞–Ω", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞"),
            ("–°–≤–∞–¥—å–±–∞ (–ì–æ–¥–æ–≤—â–∏–Ω–∞)", "–Ω–µ —É–∫–∞–∑–∞–Ω", "—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞")
        ]
        cursor.executemany("INSERT INTO events (name, date, link) VALUES (?, ?, ?)", events)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.commit()
    conn.close()


def start(update: Update, context: CallbackContext) -> int:
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –µ—Å–ª–∏ –æ–Ω –∏–¥–µ—Ç
    update.message.reply_text(
        """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–≤–µ—Ç–æ—á–Ω—É—é –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –ö–µ–∫–∞!

üå∏ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:
‚Ä¢ –ë—É–∫–µ—Ç—ã –Ω–∞ –ª—é–±–æ–µ —Å–æ–±—ã—Ç–∏–µ
‚Ä¢ –¶–≤–µ—Ç—ã –¥–ª—è –¥–æ–º–∞, —á—Ç–æ–±—ã —Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è
‚Ä¢ –¶–≤–µ—Ç–æ—á–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ –°–≤–∞–¥–µ–±–Ω—ã–µ –±—É–∫–µ—Ç—ã
‚Ä¢ –î–µ–∫–æ—Ä –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 
(—É–∫—Ä–∞—à–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã, —Ñ–æ—Ç–æ–∑–æ–Ω—ã, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)

–î–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!

üí¨ –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å?
‚Ä¢ –°–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É: +7 927 007 8846 
(WhatsApp, Viber, Telegram)

–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00

–ù–∞—à –∞–¥—Ä–µ—Å: 
–°–∞–º–∞—Ä–∞, –û—Å–µ—Ç–∏–Ω—Å–∫–∞—è 6

–ù–∞—à –º–∏–Ω–∏–∫–æ—Ä–Ω–µ—Ä —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏:
–°–∞–º–∞—Ä–∞, –Æ–∂–Ω–æ–µ —à–æ—Å—Å–µ 9, –∫–æ—Ñ–µ–π–Ω—è Pluma coffee
        """,
        reply_markup=main_keyboard
    )

    context.user_data.clear()
    return ConversationHandler.END


def info(update: Update, context: CallbackContext):
    update.message.reply_text(
        """
        üå∏ –ö–ï–ö–ê –¶–í–ï–¢–´ ‚Äì —ç—Ç–æ –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞, –≥–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è —É—Ç–æ–Ω—á—ë–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏¬†–∏ –±—É–∫–µ—Ç—ã –¥–ª—è –≤–∞—à–∏—Ö –æ—Å–æ–±—ã—Ö —Å–æ–±—ã—Ç–∏–π.
–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ–∫–∞–∂–µ–º –í–∞–º –ª—é–±—É—é —Ü–≤–µ—Ç–æ—á–Ω—É—é –ø–æ–º–æ—â—å!

–°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –≤ –Ω–∞—à–µ–º —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ, —Ç–∞–∫ –∏ –ø–æ –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º, —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤.

–û–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –∫–∞–∫ —Ñ–∏–∑.–ª–∏—Ü–∞–º, —Ç–∞–∫ –∏ —é—Ä.–ª–∏—Ü–∞–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. 

üí¨ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à [Telegram-–∫–∞–Ω–∞–ª](https://t.me/kekaflowers), —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ–± –∞–∫—Ü–∏—è—Ö.

üì∏ –ú—ã —Ç–∞–∫–∂–µ –∂–¥—ë–º –≤–∞—Å –≤ [Instagram](https://www.instagram.com/keka__flowers) –∏ [–í–ö–æ–Ω—Ç–∞–∫—Ç–µ](https://vk.com/keka_flowers) ‚Äì –∑–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏.

‚ú® –ü—Ä–∏–≤–Ω–æ—Å–∏–º –∫—Ä–∞—Å–æ—Ç—É –≤ –≤–∞—à—É –∂–∏–∑–Ω—å –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –∫—É–ª—å—Ç—É—Ä–µ —Ü–≤–µ—Ç–æ–≤!
        """,
        reply_markup=main_keyboard,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )


def geo(update: Update, context: CallbackContext):
    update.message.reply_text(
        """
        –ù–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å:
üìç [–°–∞–º–∞—Ä–∞, –û—Å–µ—Ç–∏–Ω—Å–∫–∞—è —É–ª., 6](https://yandex.ru/maps/org/keka_tsvety/94042601867/?ll=50.075679%2C53.152078&z=16.17)

–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:
üïí –ü–Ω-–í—Å: 9:00 - 21:00

–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫—Ä–∞—Å–æ—Ç–æ–π –∂–∏–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤!
        """,
        reply_markup=main_keyboard,
        parse_mode='Markdown'
    )


def get_phone_number(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT phone_number FROM users WHERE user_id = ?", (user_id,))
    phone_number = cursor.fetchone()
    conn.close()
    return phone_number[0] if phone_number else None


def save_phone_number(user_id, phone_number):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, phone_number) VALUES (?, ?)", (user_id, phone_number))
    conn.commit()
    conn.close()


def zakaz(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    phone_number = get_phone_number(user_id)

    if phone_number:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ user_data –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        context.user_data['–¢–µ–ª–µ—Ñ–æ–Ω'] = phone_number
        return phone(update, context)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        update.message.reply_text(
            'üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å! –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –ø—É—Å—Ç—ã–º. üòä',
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']],
                one_time_keyboard=True
            )
        )
        return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id

    if update.message.contact:
        contact = update.message.contact
        context.user_data['–¢–µ–ª–µ—Ñ–æ–Ω'] = contact.phone_number
        save_phone_number(user_id, contact.phone_number)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    else:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT phone_number FROM users WHERE user_id = ?", (user_id,))
            phone_number = cursor.fetchone()
            if phone_number:
                context.user_data['–¢–µ–ª–µ—Ñ–æ–Ω'] = phone_number[0]
            else:
                context.user_data['–¢–µ–ª–µ—Ñ–æ–Ω'] = '–ù–µ —É–∫–∞–∑–∞–Ω'
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            context.user_data['–¢–µ–ª–µ—Ñ–æ–Ω'] = '–ù–µ —É–∫–∞–∑–∞–Ω'
        finally:
            conn.close()

    # –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–≤–æ–¥–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π
    occasion_keyboard = ReplyKeyboardMarkup(
        [['üíç –°–≤–∞–¥—å–±–∞', 'üéâ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'],
         ['üåπ –Æ–±–∏–ª–µ–π', '‚ù§Ô∏è –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫'],
         ['üè° –¶–≤–µ—Ç—ã –¥–æ–º–æ–π', 'üéÅ –ë–µ–∑ –ø–æ–≤–æ–¥–∞'],['üîô –ù–∞–∑–∞–¥']],
        one_time_keyboard=True
    )

    update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–πü§ó',
        reply_markup=occasion_keyboard
    )
    return OCCASION

def occasion(update: Update, context: CallbackContext) -> int:
    if update.message.text != 'üîô –ù–∞–∑–∞–¥':
        context.user_data['–ü–æ–≤–æ–¥'] = update.message.text    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –±—é–¥–∂–µ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    update.message.reply_text(
        '''üíê –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç! üí∏

‚≠êÔ∏èC –Ω–∞—à–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ:
https://vk.com/keka_flowers
        ''',
        reply_markup=ReplyKeyboardMarkup(
            [['üíé –æ—Ç 5—Ç—ã—Å', 'üí∞ 3-5—Ç—ã—Å', 'ü™ô 1-3—Ç—ã—Å', '‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π'], ['üîô –ù–∞–∑–∞–¥']],
            one_time_keyboard=True
        )
    )
    return BUDGET


def budget(update: Update, context: CallbackContext) -> int:
    selection = update.message.text
    if selection == '‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π':
        update.message.reply_text('''
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç 
                                      ''')
        return CUSTOM_BUDGET
    else:
        context.user_data['–ë—é–¥–∂–µ—Ç'] = selection
        return select_date(update, context)


def custom_budget(update: Update, context: CallbackContext) -> int:
    if update.message.text != 'üîô –ù–∞–∑–∞–¥':
        context.user_data['–ë—é–¥–∂–µ—Ç'] = update.message.text
    return select_date(update, context)

def select_date(update: Update, context: CallbackContext) -> int:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    available_dates = [
        (datetime.now()).strftime('%d.%m'),  # –°–µ–≥–æ–¥–Ω—è
        (datetime.now() + timedelta(days=1)).strftime('%d.%m'),  # –ó–∞–≤—Ç—Ä–∞
        (datetime.now() + timedelta(days=2)).strftime('%d.%m')  # –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å–≤–æ–µ–π –¥–∞—Ç—ã
    date_keyboard = ReplyKeyboardMarkup(
        [available_dates, ['‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –¥–∞—Ç—É'],['üîô –ù–∞–∑–∞–¥']],
        one_time_keyboard=True
    )

    update.message.reply_text(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=date_keyboard
    )
    return DATE_SELECTION

def date_selection(update: Update, context: CallbackContext) -> int:
    selection = update.message.text

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    def validate_date_format(date_text):
        from datetime import datetime
        try:
            datetime.strptime(date_text, '%d.%m')
            return True
        except ValueError:
            return False

    if selection == '‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –¥–∞—Ç—É':
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:')
        return DATE_SELECTION  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    elif validate_date_format(selection):
        if update.message.text != 'üîô –ù–∞–∑–∞–¥':
            context.user_data['–î–∞—Ç–∞'] = selection
        update.message.reply_text(
            '‚ú® –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–µ), –∞ —Ç–∞–∫–∂–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Ü–≤–µ—Ç–æ—á–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ. üå∏',
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], one_time_keyboard=True)
        )
        return CLIENT_REQUESTS
    else:
        update.message.reply_text('‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.')
        return DATE_SELECTION

def client_requests(update: Update, context: CallbackContext) -> int:
    if update.message.text != 'üîô –ù–∞–∑–∞–¥':
        context.user_data['–ü–æ–∂–µ–ª–∞–Ω–∏—è'] = update.message.text

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞
    update.message.reply_text(
        'üìú –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∫ –±—É–∫–µ—Ç—É? –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞! üíå',
        reply_markup=ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç'],['üîô –ù–∞–∑–∞–¥']], one_time_keyboard=True)
    )

    return POSTCARD

def postcard(update: Update, context: CallbackContext) -> int:
    if update.message.text == '–î–∞':
        update.message.reply_text('üñäÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏: üíï')
        return POSTCARD_TEXT
    else:
        return ask_delivery(update, context)

def postcard_text(update: Update, context: CallbackContext) -> int:
    if update.message.text != 'üîô –ù–∞–∑–∞–¥':
        context.user_data['–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏'] = update.message.text
    return ask_delivery(update, context)

def ask_delivery(update: Update, context: CallbackContext) -> int:
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞
    update.message.reply_text(
        'üöó –ù—É–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–∫–µ—Ç–∞? –ú—ã –¥–æ—Å—Ç–∞–≤–∏–º –µ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É —Å –∑–∞–±–æ—Ç–æ–π! üè°',
        reply_markup=ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç'],['üîô –ù–∞–∑–∞–¥']], one_time_keyboard=True)
    )
    return DELIVERY

def delivery(update: Update, context: CallbackContext) -> int:
    if update.message.text == '–î–∞':
        update.message.reply_text(
            'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥ –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞), –∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–µ—Ç: üè†')
        return DELIVERY_ADDRESS
    else:
        return ask_recipient(update, context)

def delivery_address(update: Update, context: CallbackContext) -> int:
    if update.message.text != 'üîô –ù–∞–∑–∞–¥':
        context.user_data['–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'] = update.message.text
    return ask_recipient(update, context)

def ask_recipient(update: Update, context: CallbackContext) -> int:
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–∞–º –ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    update.message.reply_text(
        'üéÅ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –í—ã? üòä',
        reply_markup=ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç'],['üîô –ù–∞–∑–∞–¥']], one_time_keyboard=True)
    )
    return RECIPIENT

def recipient(update: Update, context: CallbackContext) -> int:
    if update.message.text == '–ù–µ—Ç':
        update.message.reply_text(
            'üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: üìû')
        return RECIPIENT_CONTACT
    else:
        return confirmation(update, context)

def recipient_contact(update: Update, context: CallbackContext) -> int:
    if update.message.text != 'üîô –ù–∞–∑–∞–¥':
        context.user_data['–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è'] = update.message.text
    return confirmation(update, context)

def confirmation(update: Update, context: CallbackContext) -> int:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    update.message.reply_text(
        f"üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ‚úÖ\n{facts_to_str(context.user_data)}",
        reply_markup=ReplyKeyboardMarkup([['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å'],['üîô –ù–∞–∑–∞–¥']], one_time_keyboard=True)
    )
    return CONFIRMATION


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirmation_handler(update: Update, context: CallbackContext) -> int:
    if update.message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        manager_chat_id = '@kkekrersd'
        context.bot.send_message(chat_id=manager_chat_id, text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{facts_to_str(context.user_data)}")
        update.message.reply_text(
            'üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üíê \nüì© –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. üòä',
            reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END
    else:
        update.message.reply_text(
            '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\nüí≠ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É. üòä',
            reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END

def back_occasion(update: Update, context: CallbackContext) -> int:
    del context.user_data['–ü–æ–≤–æ–¥']
    return phone(update, context)

def back_budget(update: Update, context: CallbackContext) -> int:
    del context.user_data['–ë—é–¥–∂–µ—Ç']
    return occasion(update, context)

def back_date(update: Update, context: CallbackContext) -> int:
    del context.user_data['–î–∞—Ç–∞']
    return select_date(update, context)

def back_requests(update: Update, context: CallbackContext) -> int:
    del context.user_data['–ü–æ–∂–µ–ª–∞–Ω–∏—è']
    return date_selection(update, context)

def back_postcard(update: Update, context: CallbackContext) -> int:
    if '–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏' in context.user_data and context.user_data['–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏'] is not None:
        del context.user_data['–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏']
    return client_requests(update, context)


def back_delivery(update: Update, context: CallbackContext) -> int:
    if '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏' in context.user_data and context.user_data['–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'] is not None:
        del context.user_data['–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏']
    return ask_delivery(update, context)


def back_recipient(update: Update, context: CallbackContext) -> int:
    if '–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è' in context.user_data and context.user_data['–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è'] is not None:
        del context.user_data['–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è']
    return ask_recipient(update, context)

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def anketa(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user is None:
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        update.message.reply_text(
            "üìû –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ! ‚ò∫Ô∏è",
            reply_markup=reply_markup)
        return ASK_PHONE
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
        return show_main_menu(update, context)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def ask_phone(update: Update, context: CallbackContext) -> int:
    contact = update.message.contact
    user_id = update.message.from_user.id
    phone_number = contact.phone_number

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (user_id, phone_number) VALUES (?, ?)", (user_id, phone_number))
    conn.commit()
    conn.close()

    return show_main_menu(update, context)


# –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(update: Update, context: CallbackContext) -> int:
    keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    update.message.reply_text("""
    "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π" üå∏

–ü–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–æ–≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–∞–∂–Ω—ã–º –¥–∞—Ç–∞–º: –¥–Ω—è–º —Ä–æ–∂–¥–µ–Ω–∏—è, –≥–æ–¥–æ–≤—â–∏–Ω–∞–º –∏ –¥—Ä—É–≥–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º.

‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞, –¥–∞—Ç—É –∏ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.
2Ô∏è‚É£ –ó–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è –º—ã –ø—Ä–∏—à–ª—ë–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã —É—Å–ø–µ–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∏ —É–¥–∏–≤–∏—Ç—å –±–ª–∏–∑–∫–∏—Ö.

üí° –°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞: –∑–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã, –∏ –º—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏! üéà
üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üôÉ
 """, reply_markup=reply_markup)

    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM records WHERE user_id=?", (user_id,))
    records = cursor.fetchall()
    conn.close()

    if records:
        records_list = '\n'.join([f"{i + 1}. {rec[2]} ({rec[3]})" for i, rec in enumerate(records)])
        records_message = f"üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{records_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ: üòä"
    else:
        records_message = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! ‚ú®"

    update.message.reply_text(records_message, reply_markup=reply_markup)

    return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –º–µ–Ω—é
def main_menu(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    if text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å':
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–≤–æ–¥ üòâ", reply_markup=ReplyKeyboardMarkup(
            [['–°–≤–∞–¥—å–±–∞ (–ì–æ–¥–æ–≤—â–∏–Ω–∞)', '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î—Ä—É–≥–æ–µ']],
            one_time_keyboard=True))
        return ADD_REASON
    elif text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å':
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        user_id = update.message.from_user.id
        cursor.execute("SELECT * FROM records WHERE user_id=?", (user_id,))
        records = cursor.fetchall()
        conn.close()

        if records:
            records_list = '\n'.join([f"{i + 1}. {rec[2]} ({rec[3]})" for i, rec in enumerate(records)])
            update.message.reply_text(
                f"üóëÔ∏è –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{records_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ‚ùå")
            return DELETE_RECORD
        else:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! ‚ú® ")
            return show_main_menu(update, context)
    elif text == '–ù–∞–∑–∞–¥':
        update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üåü")
        return start(update, context)
    else:
        update.message.reply_text("‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ: üòä")
        return MAIN_MENU


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
def add_reason(update: Update, context: CallbackContext) -> int:
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–≤–æ–¥–∞
    keyboard = [['–°–≤–∞–¥—å–±–∞ (–ì–æ–¥–æ–≤—â–∏–Ω–∞)', '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'], ['–î—Ä—É–≥–æ–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    update.message.reply_text("üéâ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –±—É–∫–µ—Ç–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ: üå∏",
                              reply_markup=reply_markup)
    return ADD_REASON


def process_reason(update: Update, context: CallbackContext) -> int:
    reason = update.message.text
    valid_reasons = ['–°–≤–∞–¥—å–±–∞ (–ì–æ–¥–æ–≤—â–∏–Ω–∞)', '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î—Ä—É–≥–æ–µ']

    if reason not in valid_reasons:
        update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏! ‚úÖ")
        return ADD_REASON

    if reason == '–î—Ä—É–≥–æ–µ':
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø–æ–≤–æ–¥
        update.message.reply_text("üéâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–≤–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞.")
        return ADD_CUSTOM_REASON  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é

    # –ï—Å–ª–∏ –ø–æ–≤–æ–¥ –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    context.user_data['reason'] = reason
    update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú), —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏, –∫–æ–≥–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑: üïí")
    return ADD_DATE


def process_custom_reason(update: Update, context: CallbackContext) -> int:
    custom_reason = update.message.text.strip()

    if not custom_reason:
        update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú. üìÜ")
        return ADD_CUSTOM_REASON

    context.user_data['reason'] = custom_reason
    update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
    return ADD_DATE


def add_date(update: Update, context: CallbackContext) -> int:
    date = update.message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã DD.MM
    if not validate_date_format(date):
        update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú. üìÜ")
        return ADD_DATE

    context.user_data['date'] = date
    update.message.reply_text(
        "üåº –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ, —á—Ç–æ–±—ã –º—ã —Å–¥–µ–ª–∞–ª–∏ –≤–∞—à –±—É–∫–µ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–º: ‚ú®")
    return ADD_WISHES


def add_wishes(update: Update, context: CallbackContext) -> int:
    context.user_data['wishes'] = update.message.text
    reason = context.user_data['reason']
    date = context.user_data['date']
    wishes = context.user_data.get('wishes', '')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –û—Ç–º–µ–Ω–∏—Ç—å
    keyboard = [[KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    update.message.reply_text(
        f"‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n–ü–æ–≤–æ–¥: {reason}\n–î–∞—Ç–∞: {date}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}",
        reply_markup=reply_markup
    )
    return CONFIRM_ADD


def confirm_add(update: Update, context: CallbackContext) -> int:
    if update.message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        user_id = update.message.from_user.id
        reason = context.user_data['reason']
        date = context.user_data['date']
        wishes = context.user_data.get('wishes', '')

        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO records (user_id, reason, date, wishes) VALUES (?, ?, ?, ?)",
                       (user_id, reason, date, wishes))
        conn.commit()
        conn.close()

        update.message.reply_text("üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! üåü")
    else:
        update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return show_main_menu(update, context)


def cancel_add(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return show_main_menu(update, context)


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
def delete_record(update: Update, context: CallbackContext) -> int:
    try:
        record_num = int(update.message.text) - 1
        user_id = update.message.from_user.id

        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM records WHERE user_id=?", (user_id,))
        records = cursor.fetchall()

        if 0 <= record_num < len(records):
            record_id = records[record_num][0]
            cursor.execute("DELETE FROM records WHERE id=?", (record_id,))
            conn.commit()
            update.message.reply_text("üóëÔ∏è –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üòä")
        else:
            update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòä")
        conn.close()
    except ValueError:
        update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏:\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞. üòä")

    return show_main_menu(update, context)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (–î–î.–ú–ú)
def validate_date_format(date_text):
    from datetime import datetime
    try:
        datetime.strptime(date_text, '%d.%m')
        return True
    except ValueError:
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def cancel(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update.message.reply_text('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=main_keyboard)
    return ConversationHandler.END


def error(update: Update, context: CallbackContext) -> None:
    logger.warning('Update "%s" caused error "%s"', update, context.error)
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ


def add_user(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()


def get_events():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM events")
    events = cursor.fetchall()
    conn.close()
    return events


def update_event(event_id, date=None, link=None):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    if date:
        cursor.execute("UPDATE events SET date = ? WHERE id = ?", (date, event_id))
    if link:
        cursor.execute("UPDATE events SET link = ? WHERE id = ?", (link, event_id))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
def admin(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return 1


def check_password(update, context):
    password = update.message.text
    if password == ADMIN_PASSWORD:
        context.user_data['admin_access'] = True
        show_events(update, context)
        return 2
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return -1


def show_events(update, context):
    if not context.user_data.get('admin_access'):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin.")
        return -1

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    events = get_events()
    events_text = "–°–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤:\n" + "\n".join(
        f"{event[0]}. {event[1]} - {event[2]} - {event[3]}" for event in events
    )
    reply_keyboard = [["–ù–∞–∑–∞–¥", "–ò–∑–º–µ–Ω–∏—Ç—å"]]
    update.message.reply_text(events_text, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    return 2


def handle_button(update, context):
    text = update.message.text

    if text == "–ù–∞–∑–∞–¥":
        start(update, context)
        return -1
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        return 3


def select_event(update, context):
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if text == "–ù–∞–∑–∞–¥":
        show_events(update, context)
        return 2

    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è
        event_number = int(text)
        events = get_events()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if event_number < 1 or event_number > len(events):
            update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return 3

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        context.user_data['selected_event'] = events[event_number - 1][0]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è
        reply_keyboard = [["–ù–∞–∑–∞–¥", "–ò–∑–º–µ–Ω–∏—Ç—å –î–∞—Ç—É", "–ò–∑–º–µ–Ω–∏—Ç—å –°—Å—ã–ª–∫—É"]]
        update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫: {events[event_number - 1][1]}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )
        return 4
    except ValueError:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.")
        return 3


def edit_event_option(update, context):
    text = update.message.text
    selected_event = context.user_data.get('selected_event')

    if text == "–ù–∞–∑–∞–¥":
        show_events(update, context)
        return 2
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –î–∞—Ç—É":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
        return 5
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –°—Å—ã–ª–∫—É":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")
        return 6


def set_event_date(update, context):
    selected_event = context.user_data.get('selected_event')
    new_date = update.message.text
    update_event(selected_event, date=new_date)
    update.message.reply_text("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    show_events(update, context)
    return 2


def set_event_link(update, context):
    selected_event = context.user_data.get('selected_event')
    new_link = update.message.text
    update_event(selected_event, link=new_link)
    update.message.reply_text("–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    show_events(update, context)
    return 2


def cancel(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update.message.reply_text('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=main_keyboard)
    return ConversationHandler.END


def convert_date_to_month_day_format(iso_date: datetime.date) -> str:
    return iso_date.strftime("%d.%m")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

def broadcast_forward_message(context, from_chat_id, link, user_ids):
    for user_id in user_ids:
        try:
            context.bot.forward_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=link)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö
def check_and_broadcast_events(context: CallbackContext):
    today = datetime.now(SAMARA_TIMEZONE).date()
    today_month_day = convert_date_to_month_day_format(today)
    date_in_one_day = convert_date_to_month_day_format(today + timedelta(days=1))
    date_in_three_days = convert_date_to_month_day_format(today + timedelta(days=3))
    date_in_five_days = convert_date_to_month_day_format(today + timedelta(days=5))  # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    try:
        cursor.execute(""" 
            SELECT date, link 
            FROM events 
            WHERE date IN (?, ?, ?, ?) 
        """, (today_month_day, date_in_one_day, date_in_three_days, date_in_five_days))

        events = cursor.fetchall()

        if not events:
            return

        cursor.execute("SELECT user_id FROM users")
        user_ids = [row[0] for row in cursor.fetchall()]

        if not user_ids:
            return

        for db_date, link in events:
            broadcast_forward_message(context, from_chat_id='@kekaflowers', link=link, user_ids=user_ids)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def check_and_broadcast_user_events(context: CallbackContext):
    today = datetime.now(SAMARA_TIMEZONE).date()
    date_in_one_day = today + timedelta(days=1)
    date_in_three_days = today + timedelta(days=3)
    date_in_seven_days = today + timedelta(days=7)  # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    today_month_day = convert_date_to_month_day_format(today)
    date_in_one_day_month_day = convert_date_to_month_day_format(date_in_one_day)
    date_in_three_days_month_day = convert_date_to_month_day_format(date_in_three_days)
    date_in_seven_days_month_day = convert_date_to_month_day_format(date_in_seven_days)  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    try:
        cursor.execute(""" 
            SELECT user_id, reason 
            FROM records 
            WHERE date IN (?, ?, ?, ?)
        """, (today_month_day, date_in_one_day_month_day, date_in_three_days_month_day, date_in_seven_days_month_day))

        user_records = cursor.fetchall()

        if not user_records:
            return

        for user_id, reason in user_records:
            cursor.execute("SELECT link FROM events WHERE name = ?", (reason,))
            event = cursor.fetchone()
            if event:
                link = event[0]
                broadcast_forward_message(context, from_chat_id='@kekaflowers', link=link, user_ids=[user_id])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def backup_database():
    db_file = 'bot_database.db'
    backup_file = f'bot_database_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'

    try:
        shutil.copy(db_file, backup_file)
        return backup_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_backup_to_user(context: CallbackContext):
    user_id = 330121435
    backup_file = backup_database()

    if backup_file:
        try:
            with open(backup_file, 'rb') as file:
                context.bot.send_document(chat_id=user_id, document=file, filename=backup_file)
            os.remove(backup_file)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
def schedule_tasks(updater: Updater):
    job_queue = updater.job_queue
    samara_time = time(9, 0, tzinfo=SAMARA_TIMEZONE)

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    job_queue.run_daily(send_backup_to_user, time=samara_time)
    job_queue.run_daily(check_and_broadcast_events, time=samara_time)
    job_queue.run_daily(check_and_broadcast_user_events, time=samara_time)


def main():
    create_database()
    updater = Updater("7786701773:AAES6hOSansnbEMPfQHlfJV0zKcawsB1EjM", use_context=True)
    dp = updater.dispatcher

    schedule_tasks(updater)
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(MessageHandler(Filters.regex('–ù–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'), geo))
    dp.add_handler(MessageHandler(Filters.regex('–û –Ω–∞—Å'), info))

    conv_handler_zakaz = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'), zakaz)],
        states={
            PHONE: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), start),
                MessageHandler(Filters.contact, phone),
                MessageHandler(Filters.regex('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'), phone)
            ],
            OCCASION: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), start),
                MessageHandler(Filters.text & ~Filters.command, occasion)
            ],
            BUDGET: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), back_occasion),
                MessageHandler(Filters.regex('^(üíé –æ—Ç 5—Ç—ã—Å|üí∞ 3-5—Ç—ã—Å|ü™ô 1-3—Ç—ã—Å|‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π)$'), budget)
            ],
            CUSTOM_BUDGET: [
                MessageHandler(Filters.text & ~Filters.command, custom_budget)
            ],
            DATE_SELECTION: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), back_budget),
                MessageHandler(Filters.text & ~Filters.command, date_selection)
            ],
            CLIENT_REQUESTS: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), back_date),
                MessageHandler(Filters.text & ~Filters.command, client_requests)
            ],
            POSTCARD: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), back_requests),
                MessageHandler(Filters.regex('^(–î–∞|–ù–µ—Ç)$'), postcard)
            ],
            POSTCARD_TEXT: [
                MessageHandler(Filters.text & ~Filters.command, postcard_text)
            ],
            DELIVERY: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), back_postcard),
                MessageHandler(Filters.regex('^(–î–∞|–ù–µ—Ç)$'), delivery)
            ],
            DELIVERY_ADDRESS: [
                MessageHandler(Filters.text & ~Filters.command, delivery_address)
            ],
            RECIPIENT: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), back_delivery),
                MessageHandler(Filters.regex('^(–î–∞|–ù–µ—Ç)$'), recipient)
            ],
            RECIPIENT_CONTACT: [
                MessageHandler(Filters.text & ~Filters.command, recipient_contact)
            ],
            CONFIRMATION: [
                MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), back_recipient),
                MessageHandler(Filters.regex('^(–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|–û—Ç–º–µ–Ω–∏—Ç—å)$'), confirmation_handler)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', cancel),
                   (MessageHandler(Filters.regex('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'), zakaz))]  # –í–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω—É –∏ –Ω–∞—á–∞–ª–æ
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∫–µ—Ç—ã
    conversation_handler_anketa = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π'), anketa)],
        states={
            ASK_PHONE: [MessageHandler(Filters.contact, ask_phone)],
            MAIN_MENU: [MessageHandler(Filters.text, main_menu)],
            ADD_REASON: [MessageHandler(Filters.text & ~Filters.command, process_reason)],
            ADD_CUSTOM_REASON: [MessageHandler(Filters.text & ~Filters.command, process_custom_reason)],
            ADD_DATE: [MessageHandler(Filters.text & ~Filters.command, add_date)],
            ADD_WISHES: [MessageHandler(Filters.text & ~Filters.command, add_wishes)],
            CONFIRM_ADD: [MessageHandler(Filters.text & ~Filters.command, confirm_add)],
            DELETE_RECORD: [MessageHandler(Filters.text & ~Filters.command, delete_record)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', cancel),
                   (MessageHandler(Filters.regex('–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π'), anketa)),
                   MessageHandler(Filters.regex('–ù–∞–∑–∞–¥'), start)]
    )

    conv_handler_admin = ConversationHandler(
        entry_points=[CommandHandler('admin', admin)],
        states={
            1: [MessageHandler(Filters.text & ~Filters.command, check_password)],
            2: [MessageHandler(Filters.text & ~Filters.command, handle_button)],
            3: [MessageHandler(Filters.text & ~Filters.command, select_event)],
            4: [MessageHandler(Filters.text & ~Filters.command, edit_event_option)],
            5: [MessageHandler(Filters.text & ~Filters.command, set_event_date)],
            6: [MessageHandler(Filters.text & ~Filters.command, set_event_link)]
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', cancel), CommandHandler('admin', cancel)]
    )

    dp.add_handler(conv_handler_admin)
    dp.add_handler(conv_handler_zakaz)
    dp.add_handler(conversation_handler_anketa)
    dp.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()